## This function sets initial values for the matrix and it's inverse. It then provides functions to retrieve
## the values of the matrix and the inverse when called in the cacheSolve function. It then stores the inverse
## of the matrix computed in cacheSolve outside of its local function environment.
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function(y){
x <<- y
I <<- NULL
}
getmat <- function() return(x)
setinv <- function(inv) I <<- inv
getinv <- function() I
list(set=set, getmat=getmat, setinv=setinv, getinv=getinv)
}
## This function uses the functions built into makeCacheMatrix to look for an existing inverse matrix.
## If none is found, it pulls the value of the matrix and solves it's inverse. It then uses makeCacheMatrix
## again to save the value of the new inverse matrix.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getinv()
if(!is.null(I)){
message("Finding your Matrix")
return(I)
}
data <- x$getmat()
I <- solve(data)
x$setinv(I)
return (I)
}
e <- matrix(rnorm(4), nrow = 2, ncol = 2)
e
solve(e)
q <- makeCacheMatrix(e)
cacheSolve(q)
cacheSolve(q)
